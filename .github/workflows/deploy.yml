name: Deploy SecureMsgX

on:
  push:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Build with Maven
        run: mvn clean package -DskipTests

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      # Critical SSH Fix Starts Here
      - name: Setup SSH Agent
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Verify SSH Connection
        run: |
          ssh -o StrictHostKeyChecking=no \
              -T ubuntu@${{ secrets.EC2_PUBLIC_IP }} \
              "echo 'SSH connection successful!'"

      - name: Copy files to EC2
        run: |
          scp -o StrictHostKeyChecking=no \
              Dockerfile docker-compose.yml target/*.jar \
              ubuntu@${{ secrets.EC2_PUBLIC_IP }}:/home/ubuntu/

      # Docker-compose deployment
      - name: Deploy Application
        run: |
          ssh -o StrictHostKeyChecking=no ubuntu@${{ secrets.EC2_PUBLIC_IP }} << 'EOF'
          cd /home/ubuntu
          echo "Setting environment variables"
          export DB_USERNAME='${{ secrets.DB_USERNAME }}'
          export DB_PASSWORD='${{ secrets.DB_PASSWORD }}'
          export DB_URL='${{ secrets.DB_URL }}'
          
          echo "Stopping existing containers"
          docker-compose down || true
          
          echo "Starting new deployment"
          docker-compose up -d --build
          
          echo "Deployment complete!"
          EOF
      # Critical SSH Fix Ends Here
